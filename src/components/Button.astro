---
const { title, variant, click, id, classes } = Astro.props;
---

<astro-button data-identifier={id} data-click={click}>
  <btn
    id={id}
    class=`${variant} ${classes} cta-btn text-center inline-block font-[700] leading-3 py-3 px-6 relative transition-all ease-in-out bg-transparent`
  >
    {title}
  </btn>
</astro-button>

<style>
  .primary {
    border-image: linear-gradient(135deg, #02aab0, #00cdac);
    background: -webkit-linear-gradient(135deg, #02aab0, #00cdac);
    -webkit-text-fill-color: transparent;
  }
  .primary:after {
    background-image: linear-gradient(135deg, #02aab0, #00cdac);
  }
  .primary:hover {
    color: white;
    -webkit-background-clip: border-box;
    -webkit-text-fill-color: white;
    background: transparent;
  }
  .secondary {
    -webkit-text-fill-color: white;
  }
  .secondary:after {
    background-color: white;
  }
  .secondary:hover {
    -webkit-text-fill-color: #02aab0;
  }
  .cta-btn {
    border-image-slice: 1;
    border-style: solid;
    border-width: 2px;
    cursor: pointer;
    -webkit-background-clip: text;
    z-index: 40;
    transition: all 0.3s ease;
  }
  .cta-btn:after {
    bottom: 0;
    content: "";
    display: block;
    height: 100%;
    left: 0;
    position: absolute;
    transition: all 0.3s cubic-bezier(0.19, 1, 0.22, 1);
    width: 0;
    z-index: -1;
  }
  .cta-btn:hover:after {
    width: 100%;
  }
</style>
<script>
  import { isOpen } from "../store";

  class AstroButton extends HTMLElement {
    constructor() {
      super();
      const id = this.dataset.identifier;
      if (id) {
        document
          .getElementById(id)
          .addEventListener("click", () => isOpen.set(true));
      }
    }
  }

  customElements.define("astro-button", AstroButton);
</script>
